from fastapi import FastAPI, HTTPException, File, UploadFile
from fastapi.responses import FileResponse
from playwright.sync_api import Playwright, sync_playwright, expect
from pydantic import BaseModel, Field
import requests
import shutil
import os
import subprocess
import psutil
import platform
import socket
import chardet
import codecs
from datetime import datetime
import re

app = FastAPI(title="TTB Statement API", description="API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏≤‡∏Å TTB Business One")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå
DOWNLOAD_DIR = "downloads"
if not os.path.exists(DOWNLOAD_DIR):
    os.makedirs(DOWNLOAD_DIR)

class UpdateRequest(BaseModel):
    folder_path: str = Field(..., example="/home/satement02/autoClick-Statement-SCB")
    repo_url: str = Field(..., example="git@github.com:AGScorp/autoClick-Statement-SCB.git")
# Your existing functions...








# Helper functions
def post_data_to_google_script(url, data):
    try:
        response = requests.post(url, json=data)
        response.raise_for_status()
        # print("Sending data to Google Script...")
    except requests.exceptions.HTTPError as errh:
        print(f"HTTP Error: {errh}")
    except requests.exceptions.RequestException as err:
        print(f"Error sending data to Google Script: {err}")

def format_number(number):
    str_number = str(number)

    if len(str_number) < 4:
        return str_number
    else:
        # ‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏•‡∏±‡∏á
        formatted_number = str_number[:-3] + '-' + str_number[-3:]
        return formatted_number[-5:]







@app.post("/run")

def run_playwright(username: str, password: str, client_code: str, account_no: str):
    with sync_playwright() as playwright:
        run(playwright, username, password, client_code, account_no)
    return {"status": "success"}



def get_full_xpath(element):
    components = []
    while element:
        tag_name = element.evaluate("e => e.tagName.toLowerCase()")
        if tag_name == "html":
            components.append(tag_name)
            break
        parent = element.evaluate_handle("e => e.parentElement")
        children = element.evaluate_handle("e => Array.from(e.parentElement.children).filter(c => c.tagName.toLowerCase() === e.tagName.toLowerCase())")
        element_index = element.evaluate("(e, children) => children.indexOf(e)", children)
        components.append(f"{tag_name}[{element_index + 1}]")
        element = parent
    components.reverse()
    return "/" + "/".join(components)

def convert_csv_to_utf8(file_path):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏õ‡πá‡∏ô UTF-8 encoding

    Args:
        file_path (str): ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á

    Returns:
        str: ‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö)
    """
    try:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö encoding ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
        with open(file_path, 'rb') as f:
            raw_data = f.read()
            result = chardet.detect(raw_data)
            source_encoding = result['encoding']
            confidence = result['confidence']

        print(f"Detected encoding: {source_encoding} with confidence: {confidence}")

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà UTF-8 ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô UTF-8
        if source_encoding and source_encoding.lower() != 'utf-8':
            # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ encoding ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
            with codecs.open(file_path, 'r', encoding=source_encoding, errors='replace') as f_input:
                content = f_input.read()

            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ UTF-8
            with codecs.open(file_path, 'w', encoding='utf-8') as f_output:
                f_output.write(content)

            print(f"Converted file from {source_encoding} to UTF-8: {file_path}")
        else:
            print(f"File is already in UTF-8 format or encoding could not be detected: {file_path}")

        return file_path
    except Exception as e:
        print(f"Error converting file to UTF-8: {e}")
        return file_path  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

def extract_number(xpath_string):
    # Regex pattern ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    pattern = r'/html/body/div\[1\]/div/div\[2\]/div\[2\]/table/tbody/tr\[7\]/td\[2\]/table/tbody/tr\[(\d+)\]/td\[4\]/a'
    match = re.search(pattern, xpath_string)

    if match:
        return int(match.group(1))
    return None

def extract_number_from_xpath(xpath_string):
    # ‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å XPath ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    pattern = r'/html/body\[\d+\]/div\[\d+\]/div\[\d+\]/div\[\d+\]/div\[\d+\]/table\[\d+\]/tbody\[\d+\]/tr\[(\d+)\]/td\[\d+\]/table\[\d+\]/tbody\[\d+\]/tr\[(\d+)\]/td\[\d+\]'
    match = re.search(pattern, xpath_string)

    if match:
        # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å tr ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        return int(match.group(2))
    return None












def run(playwright: Playwright, username: str, password: str, client_code: str, account_no: str) -> None:
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Playwright ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ

    Args:
        playwright: Playwright instance
        username: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        password: ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
        client_code: ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        account_no: ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
    """
    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    idCode = account_no

    # ‡πÄ‡∏õ‡∏¥‡∏î browser
     browser = playwright.chromium.launch(headless=False)
    # executable_path = "/usr/bin/google-chrome"
    # downloads_path = "/home/ags-test-bot/AutoClick/autoClickAccountStatement"
    # browser = playwright.chromium.launch(headless=False,executable_path=executable_path,args=["--no-sandbox","--disable-setuid-sandbox"],downloads_path=downloads_path,channel="stable",chromium_sandbox=False)
    context = browser.new_context()
    page = context.new_page()
    page.goto("https://www.bizgrowing.krungthai.com/corporate/Login.do?cmd=init")



    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Company ID
    page.get_by_role("row", name="Company ID", exact=True).get_by_role("textbox").click()
    page.get_by_role("row", name="Company ID", exact=True).get_by_role("textbox").fill(company_ID)

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á User ID
    page.get_by_role("row", name="User ID", exact=True).get_by_role("textbox").click()
    page.get_by_role("row", name="User ID", exact=True).get_by_role("textbox").fill(username)

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Password (‡πÉ‡∏ä‡πâ locator ‡∏ï‡∏≤‡∏° id ‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå)
    page.locator("#password-field").click()
    page.locator("#password-field").fill(password)

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Login ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
    page.get_by_role("button", name="Login").click()

    # ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå "Download" ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏•‡∏¥‡∏á‡∏Å‡πå)
    page.get_by_role("link", name="Download").first.click()

   

    page.get_by_role("cell", name="Krungthai Corporate Online :").get_by_role("list").click()
    page.locator("#select2-drop").get_by_text("6946").click()

    page.get_by_role("cell", name="Krungthai Corporate Online :").locator("img").nth(2).click()
    page.get_by_role("link", name="16").click()

    page.get_by_role("button", name="Search").click()
    page.locator("input[name=\"ch_comcodeAll\"]").check()



  
    # page.pause() # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à //////////


   

    # --- ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î ---
    page.get_by_role("button", name="Download").click()

    # --- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ---
    with page.expect_download() as download_info:
        page.get_by_label("", exact=True).get_by_role("button", name="Download").click()

    # ‡πÑ‡∏î‡πâ‡∏≠‡πá‡∏≠‡∏ö‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    download = download_info.value

    # ‡∏î‡∏π‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
    original_filename = download.suggested_filename
    print(f"üìé ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°: {original_filename}")

    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå ---
    download_path = os.path.join(os.getcwd(), "Doc_downloads")
    os.makedirs(download_path, exist_ok=True)

    # --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
    file_ext = os.path.splitext(original_filename)[1]  # ‡πÄ‡∏ä‡πà‡∏ô ".zip"
    download_file_name = f"{idCode}{file_ext}"         # ‡πÄ‡∏ä‡πà‡∏ô 123456.zip
    download_file_path = os.path.join(download_path, download_file_name)

    # --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ---
    download.save_as(download_file_path)
    print(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà: {download_file_path}")

    # --- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå .zip ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ---
    if file_ext.lower() == ".zip":
        extract_folder = os.path.join(download_path, f"{idCode}_extracted")
        os.makedirs(extract_folder, exist_ok=True)

        with zipfile.ZipFile(download_file_path, 'r') as zip_ref:
            zip_ref.extractall(extract_folder)
            print(f"üìÇ ‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå ZIP ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏µ‡πà: {extract_folder}")

        # --- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≠‡∏Å ---
        for idx, filename in enumerate(sorted(os.listdir(extract_folder)), start=1):
            old_path = os.path.join(extract_folder, filename)

            # ‡∏Ç‡πâ‡∏≤‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if os.path.isdir(old_path):
                continue

            ext = os.path.splitext(filename)[1]
            new_name = f"{idCode}{ext}"  # name01.xlsx
            new_path = os.path.join(download_path, new_name)  # ‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏≠‡∏Å

            os.rename(old_path, new_path)
            print(f"üì§ ‡∏¢‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ {filename} ‚Üí {new_name}")

        # --- ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ) ---
        os.rmdir(extract_folder)




    # ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞ logout
    page.get_by_role("img", name="close").click()
    page.get_by_role("button", name="logout").click()














    # ---------------------
    context.close()
    browser.close()




@app.get("/get-file/", summary="‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ", description="‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏¢‡∏≠‡∏î‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå.")
def get_file(filename: str):
    file_path = os.path.join(DOWNLOAD_DIR, filename)
    if os.path.exists(file_path):
        return FileResponse(file_path, media_type='application/vnd.ms-excel', filename=filename)
    else:
        raise HTTPException(status_code=404, detail="‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")

@app.get("/status", summary="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå", description="‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô CPU, RAM, ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ")
def get_server_status():
    try:
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(socket.gethostname())
        os_info = f"{platform.system()} {platform.release()}"
        python_version = platform.python_version()

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        memory_percent = memory.percent
        memory_used = f"{memory.used / (1024 * 1024 * 1024):.2f} GB"
        memory_total = f"{memory.total / (1024 * 1024 * 1024):.2f} GB"

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏™‡∏Å‡πå
        disk = psutil.disk_usage('/')
        disk_percent = disk.percent
        disk_used = f"{disk.used / (1024 * 1024 * 1024):.2f} GB"
        disk_total = f"{disk.total / (1024 * 1024 * 1024):.2f} GB"

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        boot_time = datetime.fromtimestamp(psutil.boot_time())
        uptime = datetime.now() - boot_time
        uptime_days = uptime.days
        uptime_hours, remainder = divmod(uptime.seconds, 3600)
        uptime_minutes, uptime_seconds = divmod(remainder, 60)
        uptime_str = f"{uptime_days} ‡∏ß‡∏±‡∏ô {uptime_hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {uptime_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ {uptime_seconds} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"

        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
        downloaded_files = []
        if os.path.exists(DOWNLOAD_DIR):
            downloaded_files = os.listdir(DOWNLOAD_DIR)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á response
        return {
            "status": "online",
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "system_info": {
                "hostname": hostname,
                "ip_address": ip_address,
                "os": os_info,
                "python_version": python_version
            },
            "resources": {
                "cpu": {
                    "usage_percent": cpu_percent
                },
                "memory": {
                    "usage_percent": memory_percent,
                    "used": memory_used,
                    "total": memory_total
                },
                "disk": {
                    "usage_percent": disk_percent,
                    "used": disk_used,
                    "total": disk_total
                }
            },
            "uptime": uptime_str,
            "downloads": {
                "total_files": len(downloaded_files),
                "files": downloaded_files[:10],  # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å
                "download_dir": DOWNLOAD_DIR
            }
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {str(e)}")

@app.post('/update-code', summary="‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏Ñ‡πâ‡∏î API ‡∏à‡∏≤‡∏Å git repository", description="‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ git pull ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏Ñ‡πâ‡∏î‡∏•‡∏á‡πÉ‡∏ô folder ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
async def update_code(request: UpdateRequest):
    try:
        # Extract folder path and repo URL from the request
        path_to_repo = request.folder_path
        repo_url = request.repo_url

        # Perform `git pull` using the provided SSH URL directly
        result_pull = subprocess.run(
            ["git", "pull", repo_url],
            cwd=path_to_repo,
            text=True,
            capture_output=True
        )

        if result_pull.returncode != 0:
            raise Exception(result_pull.stderr)

        return {"status": "success", "message": result_pull.stdout}

    except Exception as e:
        # logging.error(f"Error during git pull: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Error during git pull: {str(e)}")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("TTB_STM_01:app", host="0.0.0.0", port=8002, reload=True)
